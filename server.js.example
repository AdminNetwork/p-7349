
// Ce fichier est un exemple et devrait être créé dans un projet Node.js séparé
const express = require('express');
const cors = require('cors');
const sql = require('mssql');
const app = express();
const port = 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Configuration pour la connexion SQL Server
const sqlConfig = {
  user: 'JEMSPROD',
  password: '*EL*KTafPGm8qC',
  server: 'svinmssql001.groupedehon.com',
  port: 1433,
  database: 'MDMPROD',
  options: {
    encrypt: true, 
    trustServerCertificate: true,
    enableArithAbort: true
  }
};

// Fonction pour obtenir une connexion
async function getConnection() {
  try {
    const pool = await sql.connect(sqlConfig);
    return pool;
  } catch (err) {
    console.error('Erreur de connexion SQL Server:', err);
    throw err;
  }
}

// Routes API
app.get('/api/entries', async (req, res) => {
  try {
    const pool = await getConnection();
    const result = await pool.request().query('SELECT * FROM DataWarehouse.budget_entries ORDER BY id DESC');
    res.json(result.recordset);
  } catch (err) {
    console.error('Erreur lors de la récupération des entrées:', err);
    res.status(500).json({ error: err.message });
  }
});

app.post('/api/entries', async (req, res) => {
  try {
    const { 
      codeSociete, fournisseur, codeArticle, natureCommande, dateArriveeFacture,
      typeDocument, delaisPrevis, dateFinContrat, referenceAffaire, contacts,
      axeIT1, axeIT2, societeFacturee, annee, dateReglement, mois,
      montantReel, budget, montantReglement
    } = req.body;

    const pool = await getConnection();
    
    // Convertir le numéro de mois en libellé
    const months = [
      "Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
      "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
    ];
    const moisLabel = months[(mois - 1) % 12];
    
    const result = await pool.request()
      .input('codeSociete', sql.NVarChar, codeSociete)
      .input('fournisseur', sql.NVarChar, fournisseur)
      .input('codeArticle', sql.NVarChar, codeArticle)
      .input('natureCommande', sql.NVarChar, natureCommande)
      .input('dateArriveeFacture', sql.NVarChar, dateArriveeFacture)
      .input('typeDocument', sql.NVarChar, typeDocument)
      .input('delaisPrevis', sql.Int, delaisPrevis)
      .input('dateFinContrat', sql.NVarChar, dateFinContrat)
      .input('referenceAffaire', sql.NVarChar, referenceAffaire)
      .input('contacts', sql.NVarChar, contacts)
      .input('axeIT1', sql.NVarChar, axeIT1)
      .input('axeIT2', sql.NVarChar, axeIT2)
      .input('societeFacturee', sql.NVarChar, societeFacturee)
      .input('annee', sql.Int, annee)
      .input('dateReglement', sql.NVarChar, dateReglement)
      .input('mois', sql.NVarChar, moisLabel)
      .input('montantReel', sql.Float, montantReel)
      .input('budget', sql.Float, budget)
      .input('montantReglement', sql.Float, montantReglement)
      .query(`
        INSERT INTO DataWarehouse.budget_entries (
          codeSociete, fournisseur, codeArticle, natureCommande, dateArriveeFacture,
          typeDocument, delaisPrevis, dateFinContrat, referenceAffaire, contacts,
          axeIT1, axeIT2, societeFacturee, annee, dateReglement, mois,
          montantReel, budget, montantReglement
        ) VALUES (
          @codeSociete, @fournisseur, @codeArticle, @natureCommande, @dateArriveeFacture,
          @typeDocument, @delaisPrevis, @dateFinContrat, @referenceAffaire, @contacts,
          @axeIT1, @axeIT2, @societeFacturee, @annee, @dateReglement, @mois,
          @montantReel, @budget, @montantReglement
        );
        SELECT SCOPE_IDENTITY() AS id;
      `);
    
    const id = result.recordset[0].id;
    res.status(201).json({ id, ...req.body, mois: moisLabel });
  } catch (err) {
    console.error('Erreur lors de l\'ajout d\'une entrée:', err);
    res.status(500).json({ error: err.message });
  }
});

app.put('/api/entries/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { 
      codeSociete, fournisseur, codeArticle, natureCommande, dateArriveeFacture,
      typeDocument, delaisPrevis, dateFinContrat, referenceAffaire, contacts,
      axeIT1, axeIT2, societeFacturee, annee, dateReglement, mois,
      montantReel, budget, montantReglement
    } = req.body;

    const pool = await getConnection();
    
    // Convertir le numéro de mois en libellé
    const months = [
      "Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
      "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
    ];
    const moisLabel = months[(mois - 1) % 12];
    
    await pool.request()
      .input('id', sql.Int, id)
      .input('codeSociete', sql.NVarChar, codeSociete)
      .input('fournisseur', sql.NVarChar, fournisseur)
      .input('codeArticle', sql.NVarChar, codeArticle)
      .input('natureCommande', sql.NVarChar, natureCommande)
      .input('dateArriveeFacture', sql.NVarChar, dateArriveeFacture)
      .input('typeDocument', sql.NVarChar, typeDocument)
      .input('delaisPrevis', sql.Int, delaisPrevis)
      .input('dateFinContrat', sql.NVarChar, dateFinContrat)
      .input('referenceAffaire', sql.NVarChar, referenceAffaire)
      .input('contacts', sql.NVarChar, contacts)
      .input('axeIT1', sql.NVarChar, axeIT1)
      .input('axeIT2', sql.NVarChar, axeIT2)
      .input('societeFacturee', sql.NVarChar, societeFacturee)
      .input('annee', sql.Int, annee)
      .input('dateReglement', sql.NVarChar, dateReglement)
      .input('mois', sql.NVarChar, moisLabel)
      .input('montantReel', sql.Float, montantReel)
      .input('budget', sql.Float, budget)
      .input('montantReglement', sql.Float, montantReglement)
      .query(`
        UPDATE DataWarehouse.budget_entries SET
          codeSociete = @codeSociete,
          fournisseur = @fournisseur,
          codeArticle = @codeArticle,
          natureCommande = @natureCommande,
          dateArriveeFacture = @dateArriveeFacture,
          typeDocument = @typeDocument,
          delaisPrevis = @delaisPrevis,
          dateFinContrat = @dateFinContrat,
          referenceAffaire = @referenceAffaire,
          contacts = @contacts,
          axeIT1 = @axeIT1,
          axeIT2 = @axeIT2,
          societeFacturee = @societeFacturee,
          annee = @annee,
          dateReglement = @dateReglement,
          mois = @mois,
          montantReel = @montantReel,
          budget = @budget,
          montantReglement = @montantReglement
        WHERE id = @id
      `);
    
    res.json({ id: parseInt(id), ...req.body, mois: moisLabel });
  } catch (err) {
    console.error('Erreur lors de la mise à jour d\'une entrée:', err);
    res.status(500).json({ error: err.message });
  }
});

app.delete('/api/entries/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const pool = await getConnection();
    
    await pool.request()
      .input('id', sql.Int, id)
      .query('DELETE FROM DataWarehouse.budget_entries WHERE id = @id');
    
    res.status(204).send();
  } catch (err) {
    console.error('Erreur lors de la suppression d\'une entrée:', err);
    res.status(500).json({ error: err.message });
  }
});

// Démarrer le serveur
app.listen(port, () => {
  console.log(`Serveur démarré sur http://localhost:${port}`);
});
